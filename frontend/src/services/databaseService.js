import apiService from './apiService';class DatabaseService {  // Database management  async getDatabases() {    return await apiService.get('/api/database/databases');  }  async createDatabase(name, options = {}) {    return await apiService.post('/api/database/databases', { name, options });  }  async deleteDatabase(name) {    return await apiService.delete(`/api/database/databases/${name}`);  }  async getDatabaseInfo(name) {    return await apiService.get(`/api/database/databases/${name}`);  }  async cloneDatabase(sourceName, targetName) {    return await apiService.post('/api/database/databases/clone', { sourceName, targetName });  }  // Table management  async getTables(database) {    return await apiService.get(`/api/database/tables/${database}`);  }  async getTableInfo(database, table) {    return await apiService.get(`/api/database/tables/${database}/${table}`);  }  async createTable(database, tableDefinition) {    return await apiService.post(`/api/database/tables/${database}`, tableDefinition);  }  async deleteTable(database, table) {    return await apiService.delete(`/api/database/tables/${database}/${table}`);  }  async alterTable(database, table, alterations) {    return await apiService.put(`/api/database/tables/${database}/${table}`, alterations);  }  // User management  async getUsers() {    return await apiService.get('/api/database/users');  }  async createUser(userData) {    return await apiService.post('/api/database/users', userData);  }  async updateUser(username, userData) {    return await apiService.put(`/api/database/users/${username}`, userData);  }  async deleteUser(username) {    return await apiService.delete(`/api/database/users/${username}`);  }  async getUserPermissions(username) {    return await apiService.get(`/api/database/users/${username}/permissions`);  }  async updateUserPermissions(username, permissions) {    return await apiService.put(`/api/database/users/${username}/permissions`, permissions);  }  // Query execution  async executeQuery(database, query, options = {}) {    return await apiService.post('/api/database/query', { database, query, options });  }  async explainQuery(database, query) {    return await apiService.post('/api/database/query/explain', { database, query });  }  async getQueryHistory(limit = 50) {    return await apiService.get(`/api/database/query/history?limit=${limit}`);  }  async saveQuery(name, query, description = '') {    return await apiService.post('/api/database/query/saved', { name, query, description });  }  async getSavedQueries() {    return await apiService.get('/api/database/query/saved');  }  async deleteSavedQuery(id) {    return await apiService.delete(`/api/database/query/saved/${id}`);  }  // Backup and restore  async createBackup(database, type = 'full') {    return await apiService.post('/api/database/backup', { database, type });  }  async getBackups() {    return await apiService.get('/api/database/backup');  }  async restoreBackup(backupId, targetDatabase) {    return await apiService.post('/api/database/backup/restore', { backupId, targetDatabase });  }  async deleteBackup(backupId) {    return await apiService.delete(`/api/database/backup/${backupId}`);  }  async downloadBackup(backupId) {    return await apiService.download(`/api/database/backup/${backupId}/download`);  }  // Statistics and monitoring  async getDatabaseStats() {    return await apiService.get('/api/database/stats');  }  async getConnectionStats() {    return await apiService.get('/api/database/connections');  }  async getActiveQueries() {    return await apiService.get('/api/database/queries/active');  }  async killQuery(pid) {    return await apiService.post('/api/database/queries/kill', { pid });  }  // Configuration  async getConfiguration() {    return await apiService.get('/api/database/config');  }  async updateConfiguration(config) {    return await apiService.put('/api/database/config', config);  }  async reloadConfiguration() {    return await apiService.post('/api/database/config/reload');  }  // Performance monitoring  async getPerformanceMetrics() {    return await apiService.get('/api/database/performance');  }  async getSlowQueries(limit = 20) {    return await apiService.get(`/api/database/performance/slow-queries?limit=${limit}`);  }  async getLogs(type = 'error', limit = 100) {    return await apiService.get(`/api/database/logs?type=${type}&limit=${limit}`);  }  // Maintenance  async vacuumDatabase(database, options = {}) {    return await apiService.post('/api/database/maintenance/vacuum', { database, options });  }  async analyzeDatabase(database) {    return await apiService.post('/api/database/maintenance/analyze', { database });  }  async reindexDatabase(database) {    return await apiService.post('/api/database/maintenance/reindex', { database });  }  // Import/Export  async exportDatabase(database, format = 'sql') {    return await apiService.post('/api/database/export', { database, format });  }  async importDatabase(database, file) {    const formData = new FormData();    formData.append('database', database);    formData.append('file', file);    return await apiService.post('/api/database/import', formData);  }  // Extensions  async getExtensions() {    return await apiService.get('/api/database/extensions');  }  async installExtension(name) {    return await apiService.post('/api/database/extensions', { name });  }  async uninstallExtension(name) {    return await apiService.delete(`/api/database/extensions/${name}`);  }}const databaseService = new DatabaseService();export default databaseService;